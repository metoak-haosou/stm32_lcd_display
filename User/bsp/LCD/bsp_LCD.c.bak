/******************************************************************************

*重要说明！
在.h文件中，#define Immediately时是立即显示当前画面
而如果#define Delay，则只有在执行了LCD_WR_REG(0x0007,0x0173);
之后才会显示，执行一次LCD_WR_REG(0x0007,0x0173)后，所有写入数
据都立即显示。
#define Delay一般用在开机画面的显示，防止显示出全屏图像的刷新过程
******************************************************************************/
#include "stm32f10x.h"
#include "bsp/LCD/bsp_LCD.h"
#include "bsp/led/bsp_led.h"
#include <stdio.h>
#include <stdlib.h>

/*********************************************字库**************************************************/
struct word_struct allword[3] =
{
	{0,{0x0000,0x3ff0,0x0210,0x0210,0x0210,0x0210,0x0210,0x3ff0,0x0410,0x0410,0x0410,0x0410,0x0410,0x0410,0xfffe,0x0000}},  //丑                          
	{1,{0x0820,0x0440,0x7ffc,0x0100,0x0100,0x3ff8,0x0100,0x0100,0xfffe,0x0100,0x0100,0x7ffc,0x0280,0x0440,0x1830,0xe00e}},  //美
	0
};
struct char_struct allchar[100] = 
{
	{0, {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x38,0x44,0x0C,0x34,0x44,0x4C,0x36,0x00,0x00}},//a
	{1, {0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x58,0x64,0x42,0x42,0x42,0x64,0x58,0x00,0x00}},//b
	{2, {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1C,0x22,0x40,0x40,0x40,0x22,0x1C,0x00,0x00}},//c
	{3, {0x00,0x00,0x00,0x00,0x06,0x02,0x02,0x3E,0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00}},//d
	{4, {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x7E,0x40,0x42,0x3C,0x00,0x00}},//e
	{5, {0x00,0x00,0x00,0x00,0x0C,0x12,0x10,0x7C,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00}},//f
	{6, {0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x44,0x44,0x38,0x40,0x3C,0x42,0x42,0x3C}},//g
	{7, {0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00}},//h
	{8, {0x00,0x00,0x00,0x30,0x30,0x00,0x00,0x70,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00}},//i
	{9, {0x00,0x00,0x00,0x0C,0x0C,0x00,0x00,0x1C,0x04,0x04,0x04,0x04,0x04,0x04,0x44,0x78}},//j
	{10,{0x00,0x00,0x00,0x00,0xC0,0x40,0x40,0x4E,0x48,0x50,0x70,0x48,0x44,0xEE,0x00,0x00}},//k
	{11,{0x00,0x00,0x00,0x10,0x70,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00}},//l
	{12,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xFE,0x49,0x49,0x49,0x49,0x49,0xED,0x00,0x00}},//m
	{13,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDC,0x62,0x42,0x42,0x42,0x42,0xE7,0x00,0x00}},//n
	{14,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00}},//o
	{15,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xD8,0x64,0x42,0x42,0x42,0x64,0x58,0x40,0xE0}},//p
	{16,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x1A,0x26,0x42,0x42,0x42,0x26,0x1A,0x02,0x07}},//q
	{17,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x32,0x20,0x20,0x20,0x20,0xF8,0x00,0x00}},//r
	{18,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x3E,0x42,0x40,0x3C,0x02,0x42,0x7C,0x00,0x00}},//s
	{19,{0x00,0x00,0x00,0x00,0x00,0x10,0x10,0x7C,0x10,0x10,0x10,0x10,0x12,0x0C,0x00,0x00}},//t
	{20,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xC6,0x42,0x42,0x42,0x42,0x46,0x3B,0x00,0x00}},//u
	{21,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x00,0x00}},//v
	{22,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xDB,0x89,0x4A,0x5A,0x54,0x24,0x24,0x00,0x00}},//w
	{23,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x76,0x24,0x18,0x18,0x18,0x24,0x6E,0x00,0x00}},//x
	{24,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x10,0x10,0x60}},//y
	{25,{0x00,0x00,0x00,0x00,0x00,0x00,0x00,0x7E,0x44,0x08,0x10,0x10,0x22,0x7E,0x00,0x00}},//z
	{26,{0x00,0x00,0x00,0x10,0x10,0x18,0x28,0x28,0x24,0x3C,0x44,0x42,0x42,0xE7,0x00,0x00}},//A
	{27,{0x00,0x00,0x00,0xF8,0x44,0x44,0x44,0x78,0x44,0x42,0x42,0x42,0x44,0xF8,0x00,0x00}},//B
	{28,{0x00,0x00,0x00,0x3E,0x42,0x42,0x80,0x80,0x80,0x80,0x80,0x42,0x44,0x38,0x00,0x00}},//C
	{29,{0x00,0x00,0x00,0xF8,0x44,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x44,0xF8,0x00,0x00}},//D
	{30,{0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78,0x48,0x48,0x40,0x42,0x42,0xFC,0x00,0x00}},//E
	{31,{0x00,0x00,0x00,0xFC,0x42,0x48,0x48,0x78,0x48,0x48,0x40,0x40,0x40,0xE0,0x00,0x00}},//F
	{32,{0x00,0x00,0x00,0x3C,0x44,0x44,0x80,0x80,0x80,0x8E,0x84,0x44,0x44,0x38,0x00,0x00}},//G
	{33,{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x7E,0x42,0x42,0x42,0x42,0xE7,0x00,0x00}},//H
	{34,{0x00,0x00,0x00,0x7C,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x7C,0x00,0x00}},//I
	{35,{0x00,0x00,0x00,0x3E,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x88,0xF0}},//J
	{36,{0x00,0x00,0x00,0xEE,0x44,0x48,0x50,0x70,0x50,0x48,0x48,0x44,0x44,0xEE,0x00,0x00}},//K
	{37,{0x00,0x00,0x00,0xE0,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x40,0x42,0xFE,0x00,0x00}},//L
	{38,{0x00,0x00,0x00,0xEE,0x6C,0x6C,0x6C,0x6C,0x6C,0x54,0x54,0x54,0x54,0xD6,0x00,0x00}},//M
	{39,{0x00,0x00,0x00,0xC7,0x62,0x62,0x52,0x52,0x4A,0x4A,0x4A,0x46,0x46,0xE2,0x00,0x00}},//N
	{40,{0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0x82,0x44,0x38,0x00,0x00}},//O
	{41,{0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x42,0x7C,0x40,0x40,0x40,0x40,0xE0,0x00,0x00}},//P
	{42,{0x00,0x00,0x00,0x38,0x44,0x82,0x82,0x82,0x82,0x82,0x82,0xB2,0x4C,0x38,0x06,0x00}},//Q
	{43,{0x00,0x00,0x00,0xFC,0x42,0x42,0x42,0x7C,0x48,0x48,0x44,0x44,0x42,0xE3,0x00,0x00}},//R
	{44,{0x00,0x00,0x00,0x3E,0x42,0x42,0x40,0x20,0x18,0x04,0x02,0x42,0x42,0x7C,0x00,0x00}},//S
	{45,{0x00,0x00,0x00,0xFE,0x92,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00}},//T
	{46,{0x00,0x00,0x00,0xE7,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x3C,0x00,0x00}},//U
	{47,{0x00,0x00,0x00,0xE7,0x42,0x42,0x44,0x24,0x24,0x28,0x28,0x18,0x10,0x10,0x00,0x00}},//V
	{48,{0x00,0x00,0x00,0xD6,0x54,0x54,0x54,0x54,0x54,0x6C,0x28,0x28,0x28,0x28,0x00,0x00}},//W
	{49,{0x00,0x00,0x00,0xE7,0x42,0x24,0x24,0x18,0x18,0x18,0x24,0x24,0x42,0xE7,0x00,0x00}},//X
	{50,{0x00,0x00,0x00,0xEE,0x44,0x44,0x28,0x28,0x10,0x10,0x10,0x10,0x10,0x38,0x00,0x00}},//Y
	{51,{0x00,0x00,0x00,0x7E,0x84,0x04,0x08,0x08,0x10,0x20,0x20,0x42,0x42,0xFC,0x00,0x00}},//Z
	{52,{0x00,0x00,0x00,0x18,0x24,0x42,0x42,0x42,0x42,0x42,0x42,0x42,0x24,0x18,0x00,0x00}},//0
	{53,{0x00,0x00,0x00,0x08,0x38,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x08,0x3E,0x00,0x00}},//1
	{54,{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x02,0x04,0x08,0x10,0x20,0x42,0x7E,0x00,0x00}},//2
	{55,{0x00,0x00,0x00,0x3C,0x42,0x42,0x02,0x04,0x18,0x04,0x02,0x42,0x42,0x3C,0x00,0x00}},//3
	{56,{0x00,0x00,0x00,0x04,0x0C,0x0C,0x14,0x24,0x24,0x44,0x7F,0x04,0x04,0x1F,0x00,0x00}},//4 
	{57,{0x00,0x00,0x00,0x7E,0x40,0x40,0x40,0x78,0x44,0x02,0x02,0x42,0x44,0x38,0x00,0x00}},//5
	{58,{0x00,0x00,0x00,0x18,0x24,0x40,0x40,0x5C,0x62,0x42,0x42,0x42,0x22,0x1C,0x00,0x00}},//6
	{59,{0x00,0x00,0x00,0x7E,0x42,0x04,0x04,0x08,0x08,0x10,0x10,0x10,0x10,0x10,0x00,0x00}},//7
	{60,{0x00,0x00,0x00,0x3C,0x42,0x42,0x42,0x24,0x18,0x24,0x42,0x42,0x42,0x3C,0x00,0x00}},//8
	{61,{0x00,0x00,0x00,0x38,0x44,0x42,0x42,0x42,0x46,0x3A,0x02,0x02,0x24,0x18,0x00,0x00}},//9
	0		
};
int max_word_num = 2;
int max_char_num = 62;

 /*********************************************菜单**************************************************/
u8 choose = 1;

/*********************************************一级菜单**************************************************/
/*特殊的字符串*/
u8 s1[] = {37,30,29,53};
u8 s2[] = {37,30,29,54};
u8 s3[] = {37,30,29,55};
u8 s4[] = {37,30,29,56};
u8 s5[] = {30,49,34,45};
/*所有命令字符串的集合*/
u8 *allmenu1[MAX_MENU_STRING] = {s1,s2,s3,s4,s5};
u8 cur_menu1_num = 5;

//标识当前被选择的命令，只有按下了确认当前命令才会执行
u16 cmd = CMD_NONE;
//所有命令的集合
u16 allcmd[] = {CMD_NONE,CMD_LED1,CMD_LED2,CMD_LED3,CMD_LED4,CMD_EXIT};
u8 cur_cmd_num = 5;
u16 cmd_pointer = 0;
/*********************************************二级菜单**************************************************/
//待补充

/*********************************************图像显示**************************************************/
u8 lcd_display_image_status = 0;

/*配置LCD的gpio*/
 static void LCD_GPIO_Config(void)
{
    GPIO_InitTypeDef GPIO_InitStructure;
    
    /* Enable the FSMC Clock */
    RCC_AHBPeriphClockCmd(RCC_AHBPeriph_FSMC, ENABLE);
    
    /* config lcd gpio clock base on FSMC */
    RCC_APB2PeriphClockCmd(RCC_APB2Periph_GPIOA | RCC_APB2Periph_GPIOB | RCC_APB2Periph_GPIOC | RCC_APB2Periph_GPIOD | RCC_APB2Periph_GPIOE , ENABLE);
    
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_Out_PP;
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    
    /* config tft rst gpio */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_13;		
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    //LED 
		GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1;		
    GPIO_Init(GPIOB, &GPIO_InitStructure);
	
    /* config tft back_light gpio base on the PT4101 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_3 ; 	 
    GPIO_Init(GPIOA, &GPIO_InitStructure);  		   
    
    /* config tft data lines base on FSMC
	 * data lines,FSMC-D0~D15: PD 14 15 0 1,PE 7 8 9 10 11 12 13 14 15,PD 8 9 10
	 */	
    GPIO_InitStructure.GPIO_Speed = GPIO_Speed_2MHz;
    GPIO_InitStructure.GPIO_Mode = GPIO_Mode_AF_PP;
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_0 | GPIO_Pin_1 | GPIO_Pin_8 | GPIO_Pin_9 | 
                                  GPIO_Pin_10 | GPIO_Pin_14 | GPIO_Pin_15;
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7 | GPIO_Pin_8 | GPIO_Pin_9 | GPIO_Pin_10 | 
                                  GPIO_Pin_11 | GPIO_Pin_12 | GPIO_Pin_13 | GPIO_Pin_14 | 
                                  GPIO_Pin_15;
    GPIO_Init(GPIOE, &GPIO_InitStructure); 
    
    /* config tft control lines base on FSMC
	 * PD4-FSMC_NOE  :LCD-RD
   * PD5-FSMC_NWE  :LCD-WR
	 * PD7-FSMC_NE1  :LCD-CS
   * PD11-FSMC_A16 :LCD-DC
	 */
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_4; 
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_5; 
    GPIO_Init(GPIOD, &GPIO_InitStructure);
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_7; 
    GPIO_Init(GPIOD, &GPIO_InitStructure);  
    
    GPIO_InitStructure.GPIO_Pin = GPIO_Pin_11 ; 
    GPIO_Init(GPIOD, &GPIO_InitStructure);  
    
    /* tft control gpio init */	 

		GPIO_SetBits(GPIOD, GPIO_Pin_13);		 // RST = 1 
    GPIO_SetBits(GPIOD, GPIO_Pin_4);		 // RD = 1  
    GPIO_SetBits(GPIOD, GPIO_Pin_5);		 // WR = 1 
    GPIO_SetBits(GPIOD, GPIO_Pin_7);		 //	CS = 1 

}

/*配置FSMC模式*/

static void LCD_FSMC_Config(void)
{
    FSMC_NORSRAMInitTypeDef  FSMC_NORSRAMInitStructure;
    FSMC_NORSRAMTimingInitTypeDef  p; 
    
    
    p.FSMC_AddressSetupTime = 0x02;	 //地址建立时间
    p.FSMC_AddressHoldTime = 0x00;	 //地址保持时间
    p.FSMC_DataSetupTime = 0x05;		 //数据建立时间
    p.FSMC_BusTurnAroundDuration = 0x00;
    p.FSMC_CLKDivision = 0x00;
    p.FSMC_DataLatency = 0x00;

    p.FSMC_AccessMode = FSMC_AccessMode_B;	 // 一般使用模式B来控制LCD
    
    FSMC_NORSRAMInitStructure.FSMC_Bank = FSMC_Bank1_NORSRAM1;
    FSMC_NORSRAMInitStructure.FSMC_DataAddressMux = FSMC_DataAddressMux_Disable;
    FSMC_NORSRAMInitStructure.FSMC_MemoryType = FSMC_MemoryType_NOR;
    FSMC_NORSRAMInitStructure.FSMC_MemoryDataWidth = FSMC_MemoryDataWidth_16b;
    FSMC_NORSRAMInitStructure.FSMC_BurstAccessMode = FSMC_BurstAccessMode_Disable;
    FSMC_NORSRAMInitStructure.FSMC_WaitSignalPolarity = FSMC_WaitSignalPolarity_Low;
    FSMC_NORSRAMInitStructure.FSMC_WrapMode = FSMC_WrapMode_Disable;
    FSMC_NORSRAMInitStructure.FSMC_WaitSignalActive = FSMC_WaitSignalActive_BeforeWaitState;
    FSMC_NORSRAMInitStructure.FSMC_WriteOperation = FSMC_WriteOperation_Enable;
    FSMC_NORSRAMInitStructure.FSMC_WaitSignal = FSMC_WaitSignal_Disable;
    FSMC_NORSRAMInitStructure.FSMC_ExtendedMode = FSMC_ExtendedMode_Disable;
    FSMC_NORSRAMInitStructure.FSMC_WriteBurst = FSMC_WriteBurst_Disable;
    FSMC_NORSRAMInitStructure.FSMC_ReadWriteTimingStruct = &p;
    FSMC_NORSRAMInitStructure.FSMC_WriteTimingStruct = &p; 
    
    FSMC_NORSRAMInit(&FSMC_NORSRAMInitStructure); 
    
    /* Enable FSMC Bank1_SRAM Bank */
    FSMC_NORSRAMCmd(FSMC_Bank1_NORSRAM1, ENABLE);  
}

static void Delay(__IO u32 nCount)
{	
	volatile int i;
	for(i=0;i<0XFFFF;i++)
    for(; nCount != 0; nCount--);
}  
  
static void LCD_Rst(void)
{			
    Clr_Rst;
    Delay(1000);					   
    Set_Rst;		 	 
    Delay(1000);	
}
void lcd_WriteComm(u16 CMD)
{			
	*(__IO u16 *) (Bank1_LCD_C) = CMD;
}
void lcd_WriteData(u16 tem_data)
{			
	*(__IO u16 *) (Bank1_LCD_D) = tem_data;
}
void lcd_Lcd_WR_Start(void)
{
*(__IO u16 *) (Bank1_LCD_C) = 0x2C;
}

/**********************************************
Lcd初始化函数
***********************************************/
void lcd_init(void)
{	
	int i;
	LCD_GPIO_Config();
	LCD_FSMC_Config();
	LCD_Rst();

	
	lcd_WriteComm(0xB9);   // Set EXTC 
	lcd_WriteData(0xFF); 
	lcd_WriteData(0x83); 
	lcd_WriteData(0x68); 
	Delay(20);
	 
	lcd_WriteComm(0xBB);   // Set OTP 
	lcd_WriteData(0x00); 
	lcd_WriteData(0x00); 
	lcd_WriteData(0x80);   //OTP load disable 
	Delay(20); 
	 
	lcd_WriteComm(0xC2);  // For Himax internel use
	lcd_WriteData(0x00); 
	lcd_WriteData(0x30); 
	Delay(20);
	   
	lcd_WriteComm(0xC0);  // For Himax internel use
	lcd_WriteData(0x1B); 
	lcd_WriteData(0x05); 
	lcd_WriteData(0x08); 
	lcd_WriteData(0xEC); 
	lcd_WriteData(0x00); 
	lcd_WriteData(0x01); 
	Delay(20);
	  
	lcd_WriteComm(0xE3);   // For Himax internel use
	lcd_WriteData(0x00); 
	lcd_WriteData(0x4F); 
	lcd_WriteData(0x00); 
	lcd_WriteData(0x4F); 
	Delay(20);
	  
	lcd_WriteComm(0xBD);  // For Himax internel use
	lcd_WriteData(0x00); 
	lcd_WriteData(0x20); 
	lcd_WriteData(0x52); 
	Delay(20);
	   
	lcd_WriteComm(0xBF);  // For Himax internel use
	lcd_WriteData(0x01); 
	lcd_WriteData(0x04); 
	lcd_WriteData(0x2C); 
	Delay(20);
	   
	lcd_WriteComm(0xB1);   // Set Power 
	lcd_WriteData(0x00); 
	lcd_WriteData(0x02); 
	lcd_WriteData(0x1E); 
	lcd_WriteData(0x00); 
	lcd_WriteData(0x22); 
	lcd_WriteData(0x11); 	
	lcd_WriteData(0x8D); 
	Delay(20);
	  
	lcd_WriteComm(0xB6);   // Set VCOM 
	lcd_WriteData(0xc0);   // VMF 95
	lcd_WriteData(0x55);   // VMH 64
	lcd_WriteData(0x42);   // VML 42
	Delay(20);
	 
	lcd_WriteComm(0xE0);   // Set Gamma 
	lcd_WriteData(0x13); 
	lcd_WriteData(0x24); 
	lcd_WriteData(0x23); 
	lcd_WriteData(0x21); 
	lcd_WriteData(0x21); 
	lcd_WriteData(0x3F); 
	lcd_WriteData(0x16); 
	lcd_WriteData(0x5D); 
	lcd_WriteData(0x07); 
	lcd_WriteData(0x06); 
	lcd_WriteData(0x09); 
	lcd_WriteData(0x10); 
	lcd_WriteData(0x17); 
	lcd_WriteData(0x00); 
	lcd_WriteData(0x1E); 
	lcd_WriteData(0x1E); 
	lcd_WriteData(0x1C); 
	lcd_WriteData(0x1B); 
	lcd_WriteData(0x2C); 
	lcd_WriteData(0x22); 
	lcd_WriteData(0x69); 
	lcd_WriteData(0x07); 
	lcd_WriteData(0x0F); 
	lcd_WriteData(0x16); 
	lcd_WriteData(0x19); 
	lcd_WriteData(0x18); 
	lcd_WriteData(0xFF); 
	Delay(20); 
	 
	lcd_WriteComm(0xB0);   // Set OSC 
	lcd_WriteData(0x0D); 
	lcd_WriteData(0x01); 
	Delay(20); 
	 
	lcd_WriteComm(0x36);   // Set BGR 
	lcd_WriteData(0x08);

	lcd_WriteComm(0x3a);  
	lcd_WriteData(0x55);

	lcd_WriteComm(0x2D);   // Look up table for 65K color 
	for(i=0;i<32;i++)  
	{ 
	if(i<16) 
	lcd_WriteData(2*i);  // RED 
	else 
	lcd_WriteData(2*i+1); 
	} 
	for(i=0;i<64;i++) 
	lcd_WriteData(1*i);   // Green  
	for(i=0;i<32;i++) 
	{ 
	if(i<16) 
	lcd_WriteData(2*i);  // Blue  
	else 
	lcd_WriteData(2*i+1); 
	} 

	lcd_WriteComm(0x21);
	 
	lcd_WriteComm(0x11);    //Sleep Out 
	Delay(20);
	  
	lcd_WriteComm(0x29);    //Display On 
	Delay(20);

	

	Delay(10);
		
	Lcd_Light_ON;

	lcd_WriteComm(0x16);   // Set BGR 
	lcd_WriteData(0x50);
	lcd_flush_toolbar();
	lcd_draw_box(IMAGE_X_START,IMAGE_X_END,IMAGE_Y_START,IMAGE_Y_END,INIT_COLOR);
}
/*块选择函数*/
void lcd_set_area_to_display(u16 x_start,u16 x_end,u16 y_start,u16 y_end) 
{
	//Set GRAM Area 
	lcd_WriteComm(0x2A);
	lcd_WriteData(x_start>>8);
	lcd_WriteData(x_start&0xff);
	lcd_WriteData(x_end>>8);
	lcd_WriteData(x_end&0xff);

	lcd_WriteComm(0x2B);
	lcd_WriteData(y_start>>8);
	lcd_WriteData(y_start&0xff);
	lcd_WriteData(y_end>>8);
	lcd_WriteData(y_end&0xff);  
	Lcd_WR_Start();
}
/*用指定的颜色填充指定矩形框*/
void lcd_draw_box(u16 x_start,u16 x_end,u16 y_start,u16 y_end,u16 color)
{
	int size,i;
	size = (x_end-x_start+1)*(y_end-y_start+1);
    	
	lcd_set_area_to_display(x_start,x_end,y_start,y_end);
	for (i=0; i<size; i++)
	{
		lcd_WriteData(color);
	}
	
}
/*刷新屏幕*/
void lcd_flush_toolbar(void)
{
	lcd_draw_box(TOOLBAR_X_START,TOOLBAR_X_END,TOOLBAR_Y_START,TOOLBAR_Y_END,TOOLBAR_COLOR);
}

/*用指定的颜色填充指定像素点*/
void lcd_draw_pixel(u16 x, u16 y, u16 color)
{
	lcd_set_area_to_display(x,x+1,y,y+1);
	lcd_WriteData(color);
}

 /*在(x,y)处显示指定的汉字*/
void lcd_put_word(u16 x,u16 y,u16 background,u16 word_color,u8 num)
{
	int i,j;
	struct word_struct *word = allword+num;
	for(i=0;i<16;i++)//半字循环
		for(j=0;j<16;j++)//bit位循环
			if(BIT(word->data[i],15-j))
				lcd_draw_pixel(x+j,y+i,word_color);
			else
				lcd_draw_pixel(x+j,y+i,background);
}

/*在(x,y)处显示指定的字母*/
void lcd_put_char(u16 x,u16 y,u16 background,u16 word_color,u8 num)
{
	int i,j;
	struct char_struct *word = allchar+num;
	for(i=0;i<16;i++)//半字循环
		for(j=0;j<8;j++)//bit位循环
			if(BIT(word->data[i],7-j))
				lcd_draw_pixel(x+j,y+i,word_color);
			else
				lcd_draw_pixel(x+j,y+i,background);
		
}

/*显示allword库中的所有汉字*/

void lcd_display_allword(void)
{
	int i,j;
	lcd_draw_box(X_START,X_END,Y_START,Y_END,0xffff);
	for(i=0;i<15;i++){
		for(j=0;j<20;j++)
			if(((i*20)+j)<max_word_num)
				lcd_put_word(16*j,16*i,0xffff,0x0000,(i*40)+j);
	}
}
/*显示allword库中的所有字符*/

void lcd_display_allchar(void)
{
	int i,j;
	lcd_draw_box(X_START,X_END,Y_START,Y_END,0xffff);
	for(i=0;i<15;i++){
		for(j=0;j<40;j++)
			if(((i*40)+j)<max_char_num)
				lcd_put_char(8*j,16*i,0xffff,0x0000,(i*40)+j);
	}
}
void lcd_display_word_string(u16 x,u16 y,u16 background,u16 color,u8 *str,u8 num)
{
	int i;
	for(i=0;i<num;i++){
		if(i<20)
			lcd_put_word(x+i*16,y,background,color,str[i]);
	}
	
}
void lcd_display_char_string(u16 x,u16 y,u16 background,u16 color,u8 *str,u8 num)
{
	int i;
	for(i=0;i<num;i++){
		if(i<40)
			lcd_put_char(x+i*8,y,background,color,str[i]);
	}
	
}
//显示munu，以供用户选择
void lcd_display_menu(u16 choice)
{	
	u16 x=2,y=2;
	int i;
	u16 size;
	lcd_flush_toolbar();
	for(i=0;i<cur_menu1_num;i++){
		size = sizeof(allmenu1[i])/sizeof(allmenu1[i][0]);
		lcd_display_char_string(x,y,choice == allcmd[i+1]?CHOOSE_COLOR:TOOLBAR_COLOR,0x0000,allmenu1[i],size);
		x += size*8+8;
	}
}
void *p;
//显示框向下移动
void lcd_menu_choice_down(void)
{
	p = malloc(100);
	cmd_pointer++;
	cmd_pointer %=(CMD_EXIT+1);
	cmd = allcmd[cmd_pointer];
	lcd_display_menu(cmd);
}
//显示框向上移动
void lcd_menu_choice_up(void)
{
	free(p);
	cmd_pointer = cmd_pointer+CMD_EXIT;
	cmd_pointer %=(CMD_EXIT+1);
	cmd = allcmd[cmd_pointer];
	lcd_display_menu(cmd);
}	
//确认当前选项，并更新命令,该函数应该担当起发送命令给上位机的作用
void lcd_menu_choice_confirm(void)
{
	switch(cmd){
		case CMD_LED1:
			LED1_TOGGLE;
			break;
		case CMD_LED2:
			LED2_TOGGLE;
			break;
		case CMD_LED3:
			LED1_TOGGLE;
			LED2_TOGGLE;
			break;
		case CMD_LED4:
			LED1_ON;
			LED2_ON;
			break;
		default:
			LED1_OFF;
			LED2_OFF;
			break;			
	};
}
void lcd_prepare_to_display_line(u16 x,u16 y,u16 offset,u16 *data)
{
	
}
	



